name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies directly with pip
      run: |
        python -m pip install --upgrade pip
        pip install django>=5.0.1 pillow>=11.1.0 djangorestframework>=3.15.2 celery>=5.3.6 redis>=5.0.1 gunicorn>=21.2.0 psycopg2-binary>=2.9.9 python-dotenv>=1.0.0
        pip install pytest pytest-django pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Setup test environment
      run: |
        cp .env.example .env
        sed -i 's/DATABASE_ENGINE=.*/DATABASE_ENGINE=django.db.backends.postgresql/' .env
        sed -i 's/DATABASE_NAME=.*/DATABASE_NAME=test_db/' .env
        sed -i 's/DATABASE_USER=.*/DATABASE_USER=postgres/' .env
        sed -i 's/DATABASE_PASSWORD=.*/DATABASE_PASSWORD=postgres/' .env
        sed -i 's/DATABASE_HOST=.*/DATABASE_HOST=localhost/' .env
        sed -i 's/DATABASE_PORT=.*/DATABASE_PORT=5432/' .env
        sed -i 's/REDIS_HOST=.*/REDIS_HOST=localhost/' .env
    
    - name: Run tests with pytest and coverage
      run: |
        python -m pytest pets/tests/ --cov=pets --cov=accounts --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        logout: false
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/pet-adoption:latest,${{ secrets.DOCKER_HUB_USERNAME }}/pet-adoption:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pet-adoption:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/pet-adoption:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v4
    
    # This is where you would add deployment steps
    # For example, using SSH to connect to your server and pull the latest Docker image
    # This is commented out as it requires setup specific to your deployment environment
    
    # - name: Deploy to server
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USERNAME }}
    #     key: ${{ secrets.SERVER_SSH_KEY }}
    #     script: |
    #       cd /path/to/deployment
    #       docker-compose pull
    #       docker-compose up -d